---
title: "README"
author: "Hai Vo"
date: "2023/5/1"
format: 
  rst: 
    toc: false
    output-file: README.rst
  gfm:
    code-fold: true
    toc-location: right
    toc: true
    toc-depth: 1
  # html: 
  #   self-contained: true
  #   code-fold: true
  #   toc: true
  #   toc-location: body
  #   toc-depth: 1
---

[![doc](https://readthedocs.org/projects/stringpy/badge/?version=latest)](https://stringpy.readthedocs.io/en/latest/?badge=latest)
[![](https://github.com/vohai611/stringpy/actions/workflows/CI.yml/badge.svg?branch=main)](https://github.com/vohai611/stringpy/actions/workflows/CI.yml)
[![codecov](https://codecov.io/gh/vohai611/stringpy/branch/main/graph/badge.svg?token=5QNSE2HMHM)](https://codecov.io/gh/vohai611/stringpy)


# Introduction

This project is a python package to mimic [r::stringr](https://stringr.tidyverse.org/) functionalities, the core functions are written in Rust. Note that I write this package mostly for personal use (convenience and speed) and learning purpose, so please use with care!  

# How it works

- Using arrow for data structure 
- Using pyo3 for python binding
- Convert Python type (mostly List) to Rust type (mostly Vec) for the case not using arrow. This may cause some overhead, but it make the code more flexible. For example: many function not only vectorize over main array but also it arugments.

# Installation

This package is not on Pipy yet, so you need to compile from source. 

First you need rust compiler:
```
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
```

Then install this package as normal python package:
```
git clone https://github.com/vohai611/stringpy.git
pip3 install ./stringpy
```

# Usage example

```{python}
# setup
import stringpy as sp
import pandas as pd
import numpy as np
import random
import string
```

## Combine string within group
```{python}
df = pd.DataFrame({'group': ['a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b'],
              'value': ['one', 'two', 'three', 'four',None, 'six', 'seven', 'eight', 'nine', 'ten']})

df2 = df.groupby('group').agg(lambda x: sp.str_c(x, collapse='->'))

df2
```

## Split string

```{python}
sp.str_split(df2['value'], pattern='->')
```

## Camel case to snake case

```{python}
a = sp.str_replace_all(['ThisIsSomeCamelCase', 'ObjectNotFound'],
                      pattern='([a-z])([A-Z])', replace= '$1 $2').to_pylist() 
sp.str_replace_all(sp.str_to_lower(a), pattern = ' ', replace = '_')
```

## Remove accent

```{python}
vietnam = ['Hà Nội', 'Hồ Chí Minh', 'Đà Nẵng', 'Hải Phòng', 'Cần Thơ', 'Biên Hòa', 'Nha Trang', 'BMT', 'Huế', 'Buôn Ma Thuột', 'Bắc Giang', 'Bắc Ninh', 'Bến Tre', 'Bình Dương', 'Bình Phước', 'Bình Thuận', 'Cà Mau', 'Cao Bằng', 'Đắk Lắk', 'Đắk Nông', 'Điện Biên', 'Đồng Nai', 'Đồng Tháp'] 

sp.str_remove_ascent(vietnam)
```

# Random speed comparison

Although this package is not aim to speed optimization, but in most case, it still get a decent speed up compare with pandas, thank to Rust!

Below are some of random comparison between `stringpy` and `pandas`:

```{python}

letters = string.ascii_lowercase
a = [''.join(random.choice(letters) for i in range(10))  for i in range(600_000)]

a_sr = pd.Series(a)

```

## Replace pattern
```{python}
%%time
a_sr.str.replace('\w', 'b', regex=True)
```

```{python}
%%time
sp.str_replace_all(a, pattern='\w', replace= 'b')
```

## Subset by index

```{python}
%%time
a_sr.str.slice(2,4)
```


```{python}
%%time
sp.str_sub(a, start=2, end=4)
```
```
## Counting

```{python}
%%time
a_sr.str.count('a')
```

```{python}
%%time
sp.str_count(a, pattern='a')
```

# Implement list

## part 1
- [x] str_count
- [x] str_detect
- [x] str_extract /str_extract_all
- [] str_locate() str_locate_all()
- [x] str_match() str_match_all()
- [x] str_replace() str_replace_all()
- [x] str_remove() str_remove_all()
- [x] str_split()
- [] str_split_1() str_split_fixed() str_split_i()
- [x] str_starts() str_ends()

- [x] str_subset()
- [x] str_which()

- [x] str_c(), str_combine()
- [] str_flatten() str_flatten_comma()

## part 2
- [x] str_dup()
- [x] str_length() str_width()
- [x] str_pad()
- [x] str_sub()/  str_sub_all()
- [x] str_trim() str_squish()
- [x] str_trunc()
- [] str_wrap()
- [x] str_to_upper() str_to_lower() str_to_title() str_to_sentence()
- [x] str_unique()
- [x] str_remove_ascent()

## Optimize

Handle case when input is scalar or vector in Rust to improve speed

# Different type of i/o

## Python
- `@export`: one array in, one array out

- `@export2`: multiple array in, one array out

## Rust
- `apply_utf8!()`   
- `apply_utf8_bool!()`
- `apply_utf8_lst!()`

1. vec<str> in vec<str> out
- Use apply_utf8!() macro
- @export

2. vec<str>+ in vec<str> out
- Use apply_utf8!() macro
- @export2

3. vec<str> in vec<bool> out
- Use apply_utf8_bool!() macro
- @export

4. vec<str> in vec<vec<str>> out
- Use apply_utf8_lst!() macro
- @export

